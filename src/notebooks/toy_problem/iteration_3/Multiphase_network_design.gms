Set n(*) "Nodes in the network";
Alias(n,nn);
Set i(n) "Source nodes / multi-phase";
Set j(n) "Junction nodes / multi-phase";
Set pf(n) "Processing facilities";
Set arcs(n,nn) "Allowed connections";
Set t(*) "Time periods";
Alias(t,tt);
Set tp(t) "Time periods where there is a production peak";
Set c(*) "Flow components";
Set d(*) "Pipeline diameter options";
Set s(*) "Facility sizes";
Set sel_pipes(n,nn,d) "Pipeline connections that were selected in previous iterations of the algorithm";
Set pw(*) "Segments for LM correalation piecewise linearization";
Parameter Qprod(c,t) "Oil production at each node at 't' periods after start-time [BBL per day]";
Parameter st_time(i) "Production start time of source node 'i' ";
Parameter capacity(s,c) "Capacity for facility size 's' and component 'c' [mscf per day]";
Parameter diam(d) "Diameter of pipeline option 'd' [inches]";
Parameter facility_cost_size(s) "Cost for facility size 's' [MMUSD]";
Parameter diameter_cost(d) "Pipeline cost per km for diameter size 'd' [kUSD/mile]";
Parameter ir "Interest rate [%]" / 0.008333333333333333 /;
Parameter dist(n,nn) "Distance between nodes'n' to 'nn' [mile]";
Parameter hffl "Hydraulic friction factor for liquid phase" / 0.025 /;
Parameter rho_liq "Density of liquid phase mixture" / 850.0 /;
Parameter kw(n,nn,d) "Weymouth constants and parameters synthesized";
Parameter maxFlow(c,t) "Maximum flow of component 'c' during time period 't' [mscf per day]";
Parameter dp_max "Maximum allowable pressure drop between two nodes [MPa]" / 1.1720190000000001 /;
Parameter pmin_pf "Minimum inlet pressure at processing facility [MPa]" / 0.551581 /;
Parameter fixPress(i,j,d,t) "Pre-computed max pressure at junction 'j' during time period 't' if connection (i, j) is installed with diameter 'd' [MPa]";
Parameter maxPress "Max pressure at node [MPa]" / 1.7236 /;
Parameter ixlm_ub(pw,j,pf,d,t) "IXLM upper bound for LM interval 'pw' for connection (j,pf,d) at time 't'";
Parameter ylp(pw,j,pf,d,t) "YLM multiplier for liquid phase for LM interval 'pw' for connection (j,pf,d) at time 't'";
Parameter allowed_int(j,pf,d) "Order of maximum allowed interval 'pw' ";
binary Variable y_pf(pf,s,t) "Equals 1 if a processing facility of size 's' is installed at node 'pf' during time period 't'";
binary Variable x_bar(n,nn,d,t) "Equals 1 if a pipeline segment of diameter 'd' between nodes 'n' and 'nn' is installed at time period 't'";
binary Variable x_pw(j,pf,d,t,pw) "Equals 1 if connection 'j' to 'pf' with diameter 'd' lies between ixlm interval of piecewise linearization 'pw' ";
positive Variable Qinter(n,nn,d,t,c) "Flow of component 'c' through pipeline segment between nodes 'n' and 'nn' of diameter 'd' during time period 't' [mscf per day]";
positive Variable QGASinterSQ(n,nn,d,t) "Squared flow of 'gas' through pipeline segment between nodes 'n' and 'nn' of diameter 'd' during time period 't' [(mscf per day)**2]";
positive Variable Qprocess(pf,t,c) "Amount of component 'c' processed at facility 'pf' during time period 't' [mscf per day]";
positive Variable press(n,t) "Pressure at node 'n' during time period 't' [MPa]";
positive Variable pressSQ(n,t) "Squared pressure at node 'n' during time period 't' [MPa]";
positive Variable pressGAS(pf,t) "Pressure at node 'pf' during time period 't' assuming gas-only pressure drop [MPa]";
positive Variable deltaP(n,nn,t) "Pressure drop 'multiphase' between nodes 'n' and 'nn' during time period 't' [MPa]";
positive Variable deltaPgas(n,nn,t) "Pressure drop 'gas-only' between nodes 'n' and 'nn' during time period 't' assuming pipe diameter 'd' [MPa]";
positive Variable deltaPliq(n,nn,d,t) "Pressure drop 'liquid-only' between nodes 'n' and 'nn' during time period 't' [MPa]";
positive Variable deltaPliqYLM(n,nn,d,t,pw) "Intermediate variable equal to pressure drop 'liquid-only' between nodes 'n' and 'nn' with diameter 'd' during time period 't' [MPa]";
positive Variable vel_liq(n,nn,d,t) "Liquid velocity between nodes 'n' and 'nn' during time period 't' assuming pipe diameter 'd' [m/s]";
positive Variable accumulated_capacity(pf,t,c) "Total accumulated capacity at processing facility 'pf' of component 'c' during time period 't' [mscf per day]";
positive Variable pipe_cost(t) "Total cost on pipeline installation during time period 't' [kUSD]";
positive Variable facility_cost(t) "Total cost on facility installation during time period 't' [kUSD]";
free Variable total_cost "Total discounted cost [MMUSD]";
Equation mass_balance_ij(i,c,t) "Mass balance for source-junction";
Equation mass_balance_jpf(j,c,t) "Mass balance for junction-processing facility";
Equation mass_balance_pf(pf,c,t) "Mass balance for processing facility";
Equation compute_pipe_cost_per_t(t) "Compute total pipeline installation cost at period 't' ";
Equation compute_facility_cost_per_t(t) "Compute total facility installation cost at period 't' ";
Equation compute_total_cost "Compute total discounted cost";
Equation facility_capacity(pf,t,c) "Facility must have enough processing capacity for each component";
Equation pipeline_capacity(n,nn,d,t,c) "A pipeline must be installed to transport flow";
Equation unique_capacity(n) "Just one pipeline can be installed for each connection";
Equation def_acum_cap(pf,c,t) "Compute accumulated capacity of processing facility at each time period";
Equation compute_pressure_junction(i,j,d,t) "Compute max pressure at junction 'j' based on connections from sources ";
Equation compute_square_pressure_junction(i,j,d,t) "Compute max squared pressure at junction 'j' based on connections from sources ";
Equation min_press_pf(pf,t) "Impose minimum pressure at processing facility 'pf' during time period 't'";
Equation min_press_pf_GAS(pf,t) "Impose minimum pressure at processing facility 'pf' during time period 't'";
Equation press_at_pf(j,pf,t) "Compute pressure at processing facility 'pf' during time period 't'";
Equation compute_velLIQ(j,pf,d,t) "Compute liquid velocity assuming liquid-only on pipeline ";
Equation compute_dpLIQ(j,pf,d,t) "Compute liquid-only pressure drop between nodes 'j' and 'pf' during time period 't' [MPa]";
Equation weymouth_correlation(j,pf,d,t) "Weymouth correlation for gas-only pressure drop between nodes 'n' and 'nn' during time period 't' assuming diameter 'd' [MPa]";
Equation compute_dpGAS(j,pf,t) "Compute gas-only pressure drop between nodes 'j' and 'pf' during time period 't' [MPa]";
Equation one_interval(j,pf,d,t) "Each connection (j, pf, d) must lie between a single 'pw' at each time period 't' ";
Equation ixlm_interval(j,pf,d,t,pw) "Impose interval for LM correlation between junction 'j' and processing facility 'pf' during time period 't' ";
Equation compute_deltaPliqYLM(j,pf,d,t) "Intermediate variable definition";
Equation deltaPliqYLM_bound(j,pf,d,t,pw) "Fix to 0 intermediate variable if IXLM does not lie between interval 'pw' ";
Equation pressure_drop_from_j_to_pf(j,pf,d,t) "Compute pressure drop from junction 'j' to processing facility 'pf' ";
Model Multiphase_network_design / mass_balance_ij,mass_balance_jpf,mass_balance_pf,compute_pipe_cost_per_t,compute_facility_cost_per_t,compute_total_cost,facility_capacity,pipeline_capacity,unique_capacity,def_acum_cap,compute_pressure_junction,compute_square_pressure_junction,min_press_pf,min_press_pf_GAS,press_at_pf,compute_velLIQ,compute_dpLIQ,weymouth_correlation,compute_dpGAS,one_interval,ixlm_interval,compute_deltaPliqYLM,deltaPliqYLM_bound,pressure_drop_from_j_to_pf /;
$onMultiR
$gdxLoadAll c:\Users\Diego\Desktop\ExxonMobil\LM_Gathering\src\notebooks\toy_problem\iteration_3\Multiphase_network_design_data.gdx
$offMulti
mass_balance_ij(i,c,t) $ (ord(t) >= st_time(i)) .. sum(tt $ (ord(tt) eq ord(t) + 1 - st_time(i)),Qprod(c,tt)) =e= sum((nn,d) $ (arcs(i,nn)),Qinter(i,nn,d,t,c));
mass_balance_jpf(j,c,t) .. sum((nn,d) $ (arcs(nn,j)),Qinter(nn,j,d,t,c)) =e= sum((nn,d) $ (arcs(j,nn)),Qinter(j,nn,d,t,c));
mass_balance_pf(pf,c,t) .. sum((nn,d) $ (arcs(nn,pf)),Qinter(nn,pf,d,t,c)) =e= Qprocess(pf,t,c);
compute_pipe_cost_per_t(t) .. pipe_cost(t) =e= sum(d,diameter_cost(d) * sum((n,nn) $ (arcs(n,nn)),dist(n,nn) * x_bar(n,nn,d,t)));
compute_facility_cost_per_t(t) .. facility_cost(t) =e= 1000 * sum((pf,s),facility_cost_size(s) * y_pf(pf,s,t));
compute_total_cost .. total_cost =e= sum(t,rPower(1 + ir,(-(ord(t) - 1))) * (pipe_cost(t) + facility_cost(t))) / 1000;
facility_capacity(pf,t,c) $ (tp(t)) .. Qprocess(pf,t,c) =l= accumulated_capacity(pf,t,c);
pipeline_capacity(n,nn,d,t,c) $ (arcs(n,nn) and tp(t)) .. Qinter(n,nn,d,t,c) =l= maxFlow(c,t) * sum(tt $ (ord(tt) <= ord(t) and tp(tt)),x_bar(n,nn,d,tt));
unique_capacity(n) .. sum((nn,d,t) $ (arcs(n,nn) and tp(t)),x_bar(n,nn,d,t)) =l= 1;
def_acum_cap(pf,c,t) .. sum((s,tt) $ (ord(tt) <= ord(t)),capacity(s,c) * y_pf(pf,s,tt)) =e= accumulated_capacity(pf,t,c);
compute_pressure_junction(i,j,d,t) $ (arcs(i,j) and tp(t)) .. press(j,t) =l= fixPress(i,j,d,t) + maxPress * (1 - sum(tt $ (ord(tt) <= ord(t)),x_bar(i,j,d,tt)));
compute_square_pressure_junction(i,j,d,t) $ (arcs(i,j) and tp(t)) .. pressSQ(j,t) =l= fixPress(i,j,d,t) * fixPress(i,j,d,t) + maxPress * maxPress * (1 - sum(tt $ (ord(tt) <= ord(t)),x_bar(i,j,d,tt)));
min_press_pf(pf,t) .. press(pf,t) =g= pmin_pf;
min_press_pf_GAS(pf,t) .. pressGAS(pf,t) =g= pmin_pf;
press_at_pf(j,pf,t) $ (arcs(j,pf)) .. press(pf,t) =l= press(j,t) - deltaP(j,pf,t) + maxPress * (1 - sum((d,tt) $ (ord(tt) <= ord(t)),x_bar(j,pf,d,tt)));
compute_velLIQ(j,pf,d,t) $ (arcs(j,pf) and tp(t)) .. vel_liq(j,pf,d,t) =g= (Qinter(j,pf,d,t,"oil") + Qinter(j,pf,d,t,"water")) / (3.141592653589793 * power(diam(d),2) / 4 * 24 * 3600);
compute_dpLIQ(j,pf,d,t) $ (arcs(j,pf) and tp(t)) .. deltaPliq(j,pf,d,t) =g= dist(j,pf) * (hffl / 2) * (rho_liq * vel_liq(j,pf,d,t) * vel_liq(j,pf,d,t)) / diam(d);
weymouth_correlation(j,pf,d,t) $ (sel_pipes(j,pf,d) and tp(t)) .. pressGAS(pf,t) * pressGAS(pf,t) * 1000000.0 =l= pressSQ(j,t) * 1000000.0 - QGASinterSQ(j,pf,d,t) * 801.8422896940103 * kw(j,pf,d);
compute_dpGAS(j,pf,t) $ (tp(t)) .. deltaPgas(j,pf,t) =e= press(j,t) - pressGAS(pf,t);
one_interval(j,pf,d,t) $ (sel_pipes(j,pf,d) and tp(t)) .. sum(pw $ (ord(pw) <= allowed_int(j,pf,d)),x_pw(j,pf,d,t,pw)) =e= sum(tt $ (ord(tt) <= ord(t)),x_bar(j,pf,d,tt));
ixlm_interval(j,pf,d,t,pw) $ (sel_pipes(j,pf,d) and tp(t) and ord(pw) <= allowed_int(j,pf,d)) .. deltaPgas(j,pf,t) =l= (ixlm_ub(pw,j,pf,d,t) - 1000.0) * deltaPliq(j,pf,d,t) + dp_max * (1 - x_pw(j,pf,d,t,pw));
compute_deltaPliqYLM(j,pf,d,t) $ (sel_pipes(j,pf,d) and tp(t)) .. deltaPliq(j,pf,d,t) =e= sum(pw $ (ord(pw) <= allowed_int(j,pf,d)),deltaPliqYLM(j,pf,d,t,pw));
deltaPliqYLM_bound(j,pf,d,t,pw) $ (sel_pipes(j,pf,d) and tp(t) and ord(pw) <= allowed_int(j,pf,d)) .. deltaPliqYLM(j,pf,d,t,pw) =l= dp_max * x_pw(j,pf,d,t,pw);
pressure_drop_from_j_to_pf(j,pf,d,t) $ (sel_pipes(j,pf,d) and tp(t)) .. deltaP(j,pf,t) =g= sum(pw $ (ord(pw) <= allowed_int(j,pf,d)),ylp(pw,j,pf,d,t) * deltaPliqYLM(j,pf,d,t,pw));
solve Multiphase_network_design using MIQCP MIN total_cost;